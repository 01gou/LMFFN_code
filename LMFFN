input_layer = Input((S, S, L, 1))
input_layer1 = Reshape((S, S, L))(input_layer)

out1 = speca(input_layer1, filters=2, kernel_size=5, strides=1)
out6 = specm(input_layer1, filters=2, kernel_size=5, strides=1)

conv_layer1_a = DepthwiseConv2D(kernel_size=(5, 5), strides=1, depth_multiplier=1, padding='same')(input_layer1)
conv_layer1_b = DepthwiseConv2D(kernel_size=(5, 5), strides=1, depth_multiplier=1, padding='same')(input_layer1)
conv_layer1_c = DepthwiseConv2D(kernel_size=(5, 5), strides=1, depth_multiplier=1, padding='same')(input_layer1)
conv_layer1 = Concatenate(axis=3)([conv_layer1_a, conv_layer1_b, conv_layer1_c])

out12 = speca(conv_layer1, filters=1, kernel_size=5, strides=1)
out67 = specm(conv_layer1, filters=1, kernel_size=5, strides=1)

conv_layer1 = DepthwiseConv2D(kernel_size=(3, 3), strides=1, depth_multiplier=1, padding='same')(conv_layer1)
conv_layer1_1 = Reshape((conv_layer1.shape[1], conv_layer1.shape[2], conv_layer1.shape[3], 1))(conv_layer1)
conv_layer1_2 = Conv3D(filters=1, kernel_size=(1, 1, 7), strides=1, activation='relu', padding='same')(conv_layer1_1)
conv_layer21_ = Reshape((conv_layer1_2.shape[1], conv_layer1_2.shape[2], conv_layer1_2.shape[3]))(conv_layer1_2)
conv_layer11 = DepthwiseConv2D(kernel_size=(3, 3), strides=1, depth_multiplier=1, padding='same')(conv_layer21_)
conv_layer11_1 = Reshape((conv_layer11.shape[1], conv_layer11.shape[2], conv_layer11.shape[3], 1))(conv_layer11)
conv_layer11_2 = Conv3D(filters=1, kernel_size=(1, 1, 7), strides=1, activation='relu', padding='same')(conv_layer11_1)
conv_layer2_ = Reshape((conv_layer11_2.shape[1], conv_layer11_2.shape[2], conv_layer11_2.shape[3]))(conv_layer11_2)
conv_layer2_ = add([conv_layer2_, conv_layer1])

out2 = speca(conv_layer2_, filters=1, kernel_size=5, strides=1)
out7 = specm(conv_layer2_, filters=1, kernel_size=5, strides=1)

conv_layer2 = DepthwiseConv2D(kernel_size=(3, 3), strides=1, depth_multiplier=1, padding='same')(conv_layer2_)
conv_layer2_1 = Reshape((conv_layer2.shape[1], conv_layer2.shape[2], conv_layer2.shape[3], 1))(conv_layer2)
conv_layer2_2 = Conv3D(filters=1, kernel_size=(1, 1, 5), strides=1, activation='relu', padding='same')(conv_layer2_1)
conv_layer31_ = Reshape((conv_layer2_2.shape[1], conv_layer2_2.shape[2], conv_layer2_2.shape[3]))(conv_layer2_2)
conv_layer21 = DepthwiseConv2D(kernel_size=(3, 3), strides=1, depth_multiplier=1, padding='same')(conv_layer31_)
conv_layer21_1 = Reshape((conv_layer21.shape[1], conv_layer21.shape[2], conv_layer21.shape[3], 1))(conv_layer21)
conv_layer21_2 = Conv3D(filters=1, kernel_size=(1, 1, 5), strides=1, activation='relu', padding='same')(conv_layer21_1)
conv_layer3_ = Reshape((conv_layer21_2.shape[1], conv_layer21_2.shape[2], conv_layer21_2.shape[3]))(conv_layer21_2)
conv_layer3_ = add([conv_layer3_, conv_layer2_])

out3 = speca(conv_layer3_, filters=1, kernel_size=5, strides=1)
out8 = specm(conv_layer3_, filters=1, kernel_size=5, strides=1)

conv_layer3 = DepthwiseConv2D(kernel_size=(3, 3), strides=1, depth_multiplier=1, padding='same')(conv_layer3_)
conv_layer3_1 = Reshape((conv_layer3.shape[1], conv_layer3.shape[2], conv_layer3.shape[3], 1))(conv_layer3)
conv_layer3_2 = Conv3D(filters=1, kernel_size=(1, 1, 3), strides=1, activation='relu', padding='same')(conv_layer3_1)
conv_layer41_ = Reshape((conv_layer3_2.shape[1], conv_layer3_2.shape[2], conv_layer3_2.shape[3]))(conv_layer3_2)
conv_layer31 = DepthwiseConv2D(kernel_size=(3, 3), strides=1, depth_multiplier=1, padding='same')(conv_layer41_)
conv_layer31_1 = Reshape((conv_layer31.shape[1], conv_layer31.shape[2], conv_layer31.shape[3], 1))(conv_layer31)
conv_layer31_2 = Conv3D(filters=1, kernel_size=(1, 1, 3), strides=1, activation='relu', padding='same')(conv_layer31_1)
conv_layer4_ = Reshape((conv_layer31_2.shape[1], conv_layer31_2.shape[2], conv_layer31_2.shape[3]))(conv_layer31_2)
conv_layer4_ = add([conv_layer4_, conv_layer3_])

conv_layer4_44 = mobilnet_block2d(conv_layer4_, filters=128, strides=1)
conv_layer4 = mobilnet_block2d(conv_layer4_44, filters=128, strides=1)

flatten_layer = Flatten()(conv_layer4)
flatten_layer1 = Reshape((flatten_layer.shape[1], 1))(flatten_layer)
spe = Concatenate(axis=1)([out1, out12, out2, out6, out67, out7])
flatten_layer1 = Concatenate(axis=1)([flatten_layer1, spe])
flatten_layer1 = Conv1D(filters=1, kernel_size=10, strides=5, activation='relu')(flatten_layer1)
flatten_layer1 = Flatten()(flatten_layer1)
output_layer = Dense(units=output_units, activation='softmax')(flatten_layer1)

model = Model(inputs=input_layer, outputs=output_layer)


def mobilnet_block2d(x, filters, strides):
    x = Conv2D(filters=filters, kernel_size=1, strides=1, activation='relu')(x)
    # x = normalization(x)
    # x = ReLU()(x)
    return x


def speca(input, filters=16, kernel_size=5, strides=1):
    out1 = GlobalAveragePooling2D(data_format='channels_last')(input)
    out1 = Reshape((out1.shape[1], 1))(out1)
    out1 = Conv1D(filters=filters, kernel_size=kernel_size, strides=strides, activation='relu', padding='same')(out1)
    out1 = Flatten()(out1)
    out1 = Reshape((out1.shape[1], 1))(out1)
    return out1


def specm(input, filters=16, kernel_size=5, strides=1):
    out6 = GlobalMaxPool2D(data_format='channels_last')(input)
    out6 = Reshape((out6.shape[1], 1))(out6)
    out6 = Conv1D(filters=filters, kernel_size=kernel_size, strides=strides, activation='relu', padding='same')(out6)
    out6 = Flatten()(out6)
    out6 = Reshape((out6.shape[1], 1))(out6)
    return out6
